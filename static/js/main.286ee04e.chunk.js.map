{"version":3,"sources":["components/Statistics/Statistics.styled.jsx","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.styled.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Sections/Section.styled.jsx","components/Sections/Section.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","components/App.js","index.js"],"names":["Text","styled","p","Green","span","Orange","Red","BigNumbers","Statistics","good","neutral","bad","total","positivePercentage","Button","button","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Title","h2","Section","title","children","Notification","message","App","state","handleIncrement","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oSAEaA,EAAOC,IAAOC,EAAV,2GAOJC,EAAQF,IAAOG,KAAV,6CAGLC,EAASJ,IAAOG,KAAV,8CAGNE,EAAML,IAAOG,KAAV,2CAIHG,EAAaN,IAAOG,KAAV,gD,OCcRI,EA7BI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,gCACE,eAACb,EAAD,mBACQ,IACN,cAACO,EAAD,UACE,cAACJ,EAAD,UAAQM,SAGZ,eAACT,EAAD,sBACW,IACT,cAACO,EAAD,UACE,cAACF,EAAD,UAASK,SAGb,eAACV,EAAD,kBACO,IACL,cAACO,EAAD,UACE,cAACD,EAAD,UAAMK,SAGV,eAACX,EAAD,qBACS,cAACO,EAAD,UAAaK,OAEtB,eAACZ,EAAD,iCACqB,eAACO,EAAD,WAAaM,EAAb,cC1BZC,EAASb,IAAOc,OAAV,kMCSJC,EAPS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtBD,EAAQE,KAAI,SAAAC,GAAM,OAChB,cAACN,EAAD,CAAQO,KAAK,SAAsBC,QAAS,kBAAMJ,EAAgBE,IAAlE,SACGA,GADwBA,OCJlBG,EAAQtB,IAAOuB,GAAV,mGCSHC,EAPC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACZ,qCACA,cAACJ,EAAD,UAAQG,IACR,8BAAMC,QCLG3B,EAAOC,IAAOC,EAAV,+FCKF0B,EAHM,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACjB,cAAC,EAAD,UAAOA,KCuDIC,E,4MArDbC,MAAQ,CACNtB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPqB,gBAAkB,SAAAZ,GAChB,EAAKa,UAAS,SAAAC,GACZ,OAAO,eACJd,EAASc,EAAUd,GAAU,O,EAKpCe,mBAAqB,WACnB,MAA+B,EAAKJ,MACpC,OADA,EAAQtB,KAAR,EAAcE,IAAd,EAAmBD,S,EAIrB0B,gCAAkC,WAChC,MAA+B,EAAKL,MAA5BtB,EAAR,EAAQA,KACFG,EAAQH,EADd,EAAcE,IAAd,EAAmBD,QAEnB,OAAO2B,KAAKC,MAAc,IAAP7B,EAAcG,I,4CAGnC,WACE,MAA+B2B,KAAKR,MAA5BtB,EAAR,EAAQA,KAAME,EAAd,EAAcA,IAAKD,EAAnB,EAAmBA,QACnB,OACE,gCACE,cAAC,EAAD,CAASgB,MAAM,wBAAf,SACE,cAAC,EAAD,CACET,QAAS,CAAC,OAAQ,MAAO,WACzBC,gBAAiBqB,KAAKP,oBAGzBvB,GAAQE,GAAOD,EAAU,EACxB,cAAC,EAAD,CAASgB,MAAM,YAAf,SACE,cAAC,EAAD,CACEjB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO2B,KAAKJ,qBACZtB,mBAAoB0B,KAAKH,sCAI7B,cAAC,EAAD,CAAcP,QAAQ,6B,GA/CdW,aCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.286ee04e.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  padding: 0 24px;\n  font-size: 24px;\n  color: black;\n  font-weight: bold;\n`;\n\nexport const Green = styled.span`\n  color: Green;\n`;\nexport const Orange = styled.span`\n  color: orange;\n`;\nexport const Red = styled.span`\n  color: red;\n`;\n\nexport const BigNumbers = styled.span`\n  font-size: 34px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, Green, Orange, Red, BigNumbers } from './Statistics.styled';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <div>\n    <Text>\n      Good:{' '}\n      <BigNumbers>\n        <Green>{good}</Green>\n      </BigNumbers>\n    </Text>\n    <Text>\n      Neutral:{' '}\n      <BigNumbers>\n        <Orange>{neutral}</Orange>\n      </BigNumbers>\n    </Text>\n    <Text>\n      Bad:{' '}\n      <BigNumbers>\n        <Red>{bad}</Red>\n      </BigNumbers>\n    </Text>\n    <Text>\n      Total: <BigNumbers>{total}</BigNumbers>\n    </Text>\n    <Text>\n      Positive feedback: <BigNumbers>{positivePercentage}%</BigNumbers>\n    </Text>\n  </div>\n);\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\npadding: 24px;\nmargin-left: 15px;\nbackground-color: pink;\nfont-size: 24px;\nborder-radius: 15px;\ncolor: black;\nfont-weight: bold;\n&:hover {\n  color: grey;\n}\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from './FeedbackOptions.styled';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) =>\n  options.map(option => (\n    <Button type=\"button\" key={option} onClick={() => onLeaveFeedback(option)}>\n      {option}\n    </Button>\n  ));\n\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array,\n  onLeaveFeedback: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\npadding: 24px;\nfont-size: 34px;\ncolor: black;\nfont-weight: bold;\n\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Title} from '../Sections/Section.styled';\n\nconst Section = ({title, children})=> (\n    <>\n    <Title>{title}</Title>\n    <div>{children}</div>\n</>\n)\n\nexport default Section;\n\nSection.propTypes = {\n    title: PropTypes.string,\n    children: PropTypes.element,\n}","import styled from '@emotion/styled';\n\nexport const Text = styled.p`\npadding: 24px;\nfont-size: 24px;\ncolor: red;\nfont-weight: bold;\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Text} from './Notification.styled';\n\nconst Notification = ({message}) => (\n    <Text>{message}</Text>\n)\nexport default Notification;\n\nNotification.propTypes = {\n    message: PropTypes.string\n}","import React, { Component } from 'react';\nimport Statistics from './Statistics/Statistics';\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\nimport Section from './Sections/Section';\nimport Notification from './Notification/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrement = option => {\n    this.setState(prevState => {\n      return {\n        [option]: prevState[option] + 1,\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    const { good, bad, neutral } = this.state;\n    return good + bad + neutral;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good, bad, neutral } = this.state;\n    const total = good + bad + neutral;\n    return Math.round((good * 100) / total);\n  };\n\n  render() {\n    const { good, bad, neutral } = this.state;\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={['good', 'bad', 'neutral']}\n            onLeaveFeedback={this.handleIncrement}\n          />\n        </Section>\n        {good || bad || neutral > 0 ? (\n          <Section title=\"Statistic\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback given\"></Notification>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}
{"version":3,"sources":["components/Statistics/Statistics.styled.jsx","components/Statistics/Statistics.jsx","components/FeedBackOptions/FeedbackOptions.styled.jsx","components/FeedBackOptions/FeedbackOptions.jsx","components/Sections/Section.styled.jsx","components/Sections/Section.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","components/App.js","index.js"],"names":["Text","styled","p","Green","span","Orange","Red","BigNumbers","Statistics","good","neutral","bad","total","positivePercentage","Button","button","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Title","h2","Section","title","children","Notification","message","App","useState","state","setState","countTotalFeedback","Object","values","reduce","acc","value","isShowStatistics","keys","persentage","Math","round","feedback","console","log","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAEaA,EAAOC,IAAOC,EAAV,2GAOJC,EAAQF,IAAOG,KAAV,6CAGLC,EAASJ,IAAOG,KAAV,8CAGNE,EAAML,IAAOG,KAAV,2CAIHG,EAAaN,IAAOG,KAAV,gD,OCcRI,EA7BI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,gCACE,eAACb,EAAD,mBACQ,IACN,cAACO,EAAD,UACE,cAACJ,EAAD,UAAQM,SAGZ,eAACT,EAAD,sBACW,IACT,cAACO,EAAD,UACE,cAACF,EAAD,UAASK,SAGb,eAACV,EAAD,kBACO,IACL,cAACO,EAAD,UACE,cAACD,EAAD,UAAMK,SAGV,eAACX,EAAD,qBACS,cAACO,EAAD,UAAaK,OAEtB,eAACZ,EAAD,iCACqB,eAACO,EAAD,WAAaM,EAAb,cC1BZC,EAASb,IAAOc,OAAV,0OCQJC,EAPS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtBD,EAAQE,KAAI,SAAAC,GAAM,OAChB,cAACN,EAAD,CAAQO,KAAK,SAAsBC,QAAS,kBAAMJ,EAAgBE,IAAlE,SACGA,GADwBA,OCHlBG,EAAQtB,IAAOuB,GAAV,mGCQHC,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,cAACJ,EAAD,UAAQG,IACR,8BAAMC,QCJG3B,EAAOC,IAAOC,EAAV,+FCEF0B,EADM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,cAAC,EAAD,UAAOA,KCG9B,SAASC,IACtB,MAA0BC,mBAAS,CAAEtB,KAAM,EAAGC,QAAS,EAAGC,IAAK,IAA/D,mBAAOqB,EAAP,KAAcC,EAAd,KAOMC,EAAqB,WACzB,OAAOC,OAAOC,OAAOJ,GAAOK,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,IAO5DC,EAAmBN,IAAuB,EAC1CjB,EAAUkB,OAAOM,KAAKT,GACtBpB,EAAQsB,IACRQ,EANGC,KAAKC,MAAoB,IAAbZ,EAAMvB,KAAcyB,KAQzC,OACE,gCACE,cAAC,EAAD,CAASR,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBT,QAASA,EAASC,gBArBjB,SAAA2B,GACtBC,QAAQC,IAAIF,GACZZ,GAAS,SAAAe,GAAS,kCAAUA,GAAV,kBAAsBH,EAAWG,EAAUH,GAAY,YAqBtEL,GACC,cAAC,EAAD,CAASd,MAAM,YAAf,SACE,cAAC,EAAD,CACEjB,KAAMuB,EAAMvB,KACZC,QAASsB,EAAMtB,QACfC,IAAKqB,EAAMrB,IACXC,MAAOA,EACPC,mBAAoB6B,OAKxBF,GAAoB,cAAC,EAAD,CAAcX,QAAQ,yBCvClDoB,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAACrB,EAAD,IADF,OAGAsB,SAASC,eAAe,W","file":"static/js/main.12c564dd.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  padding: 0 24px;\n  font-size: 24px;\n  color: black;\n  font-weight: bold;\n`;\n\nexport const Green = styled.span`\n  color: Green;\n`;\nexport const Orange = styled.span`\n  color: orange;\n`;\nexport const Red = styled.span`\n  color: red;\n`;\n\nexport const BigNumbers = styled.span`\n  font-size: 34px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, Green, Orange, Red, BigNumbers } from './Statistics.styled';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <div>\n    <Text>\n      Good:{' '}\n      <BigNumbers>\n        <Green>{good}</Green>\n      </BigNumbers>\n    </Text>\n    <Text>\n      Neutral:{' '}\n      <BigNumbers>\n        <Orange>{neutral}</Orange>\n      </BigNumbers>\n    </Text>\n    <Text>\n      Bad:{' '}\n      <BigNumbers>\n        <Red>{bad}</Red>\n      </BigNumbers>\n    </Text>\n    <Text>\n      Total: <BigNumbers>{total}</BigNumbers>\n    </Text>\n    <Text>\n      Positive feedback: <BigNumbers>{positivePercentage}%</BigNumbers>\n    </Text>\n  </div>\n);\n\nexport default Statistics;\n\n// Statistics.propTypes = {\n//   good: PropTypes.number,\n//   neutral: PropTypes.number,\n//   bad: PropTypes.number,\n//   total: PropTypes.number,\n//   positivePercentage: PropTypes.number,\n// };\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  padding: 24px;\n  margin-left: 15px;\n  background-color: pink;\n  font-size: 24px;\n  border-radius: 15px;\n  color: black;\n  font-weight: bold;\n  cursor: pointer;\n  &:hover {\n    color: grey;\n  }\n`;\n","import React from 'react';\nimport { Button } from './FeedbackOptions.styled';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) =>\n  options.map(option => (\n    <Button type=\"button\" key={option} onClick={() => onLeaveFeedback(option)}>\n      {option}\n    </Button>\n  ));\n\nexport default FeedbackOptions;\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\npadding: 24px;\nfont-size: 34px;\ncolor: black;\nfont-weight: bold;\n\n`;","import React from 'react';\nimport { Title } from '../Sections/Section.styled';\n\nconst Section = ({ title, children }) => (\n  <section>\n    <Title>{title}</Title>\n    <div>{children}</div>\n  </section>\n);\n\nexport default Section;\n","import styled from '@emotion/styled';\n\nexport const Text = styled.p`\npadding: 24px;\nfont-size: 24px;\ncolor: red;\nfont-weight: bold;\n`;","import React from 'react';\nimport { Text } from './Notification.styled';\n\nconst Notification = ({ message }) => <Text>{message}</Text>;\nexport default Notification;\n","import React, { useState } from 'react';\nimport Statistics from './Statistics/Statistics';\nimport FeedbackOptions from './FeedBackOptions/FeedbackOptions';\nimport Section from './Sections/Section';\nimport Notification from './Notification/Notification';\n\nexport default function App() {\n  const [state, setState] = useState({ good: 0, neutral: 0, bad: 0 });\n\n  const handleIncrement = feedback => {\n    console.log(feedback);\n    setState(prevState => ({ ...prevState, [feedback]: prevState[feedback] + 1 }));\n  };\n\n  const countTotalFeedback = () => {\n    return Object.values(state).reduce((acc, value) => acc + value, 0);\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((state.good * 100) / countTotalFeedback());\n  };\n\n  const isShowStatistics = countTotalFeedback() > 0;\n  const options = Object.keys(state);\n  const total = countTotalFeedback();\n  const persentage = countPositiveFeedbackPercentage();\n\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={options} onLeaveFeedback={handleIncrement} />\n      </Section>\n      {isShowStatistics && (\n        <Section title=\"Statistic\">\n          <Statistics\n            good={state.good}\n            neutral={state.neutral}\n            bad={state.bad}\n            total={total}\n            positivePercentage={persentage}\n          />\n        </Section>\n      )}\n\n      {!isShowStatistics && <Notification message=\"No feedback given\" />}\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />,\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
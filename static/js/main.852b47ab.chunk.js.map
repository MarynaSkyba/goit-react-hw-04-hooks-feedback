{"version":3,"sources":["components/Statistics/Statistics.styled.jsx","components/Statistics/Statistics.jsx","components/FeedBackOptions/FeedbackOptions.styled.jsx","components/FeedBackOptions/FeedbackOptions.jsx","components/Sections/Section.styled.jsx","components/Sections/Section.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","components/App.js","index.js"],"names":["Text","styled","p","Green","span","Orange","Red","BigNumbers","Statistics","good","neutral","bad","total","positivePercentage","Button","button","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Title","h2","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","Object","keys","feedback","state","console","log","Math","round","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAEaA,EAAOC,IAAOC,EAAV,2GAOJC,EAAQF,IAAOG,KAAV,6CAGLC,EAASJ,IAAOG,KAAV,8CAGNE,EAAML,IAAOG,KAAV,2CAIHG,EAAaN,IAAOG,KAAV,gD,OCcRI,EA7BI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,gCACE,eAACb,EAAD,mBACQ,IACN,cAACO,EAAD,UACE,cAACJ,EAAD,UAAQM,SAGZ,eAACT,EAAD,sBACW,IACT,cAACO,EAAD,UACE,cAACF,EAAD,UAASK,SAGb,eAACV,EAAD,kBACO,IACL,cAACO,EAAD,UACE,cAACD,EAAD,UAAMK,SAGV,eAACX,EAAD,qBACS,cAACO,EAAD,UAAaK,OAEtB,eAACZ,EAAD,iCACqB,eAACO,EAAD,WAAaM,EAAb,cC1BZC,EAASb,IAAOc,OAAV,0OCSJC,EAPS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtBD,EAAQE,KAAI,SAAAC,GAAM,OAChB,cAACN,EAAD,CAAQO,KAAK,SAAsBC,QAAS,kBAAMJ,EAAgBE,IAAlE,SACGA,GADwBA,OCJlBG,EAAQtB,IAAOuB,GAAV,mGCSHC,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,qCACE,cAACJ,EAAD,UAAQG,IACR,8BAAMC,QCLG3B,EAAOC,IAAOC,EAAV,+FCGF0B,EADM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,cAAC,EAAD,UAAOA,KCE9B,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOtB,EAAP,KAAauB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOrB,EAAP,KAAgBuB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOpB,EAAP,KAAYuB,EAAZ,KA2BMjB,EAAUkB,OAAOC,KAAK,CAAE3B,OAAMC,UAASC,QAC7C,OACE,gCACE,cAAC,EAAD,CAASe,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBT,QAASA,EAASC,gBA7BjB,SAAAmB,GACtB,OAAQA,GACN,IAAK,OACHL,GAAQ,SAAAM,GAAK,OAAIA,EAAQ,KACzB,MACF,IAAK,UACHL,GAAW,SAAAK,GAAK,OAAIA,EAAQ,KAC5B,MACF,IAAK,MACHJ,GAAO,SAAAI,GAAK,OAAIA,EAAQ,KACxB,MACF,QACEC,QAAQC,IAAI,+BAmBb/B,GAAQE,GAAOD,EAAU,EACxB,cAAC,EAAD,CAASgB,MAAM,YAAf,SACE,cAAC,EAAD,CACEjB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MApBDH,EAAOE,EAAMD,EAqBZG,mBAlB8B,WACtC,IAAMD,EAAQH,EAAOE,EAAMD,EAC3B,OAAO+B,KAAKC,MAAc,IAAPjC,EAAcG,GAgBL+B,OAIxB,cAAC,EAAD,CAAcd,QAAQ,yBChD9Be,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAChB,EAAD,IADF,OAGAiB,SAASC,eAAe,W","file":"static/js/main.852b47ab.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  padding: 0 24px;\n  font-size: 24px;\n  color: black;\n  font-weight: bold;\n`;\n\nexport const Green = styled.span`\n  color: Green;\n`;\nexport const Orange = styled.span`\n  color: orange;\n`;\nexport const Red = styled.span`\n  color: red;\n`;\n\nexport const BigNumbers = styled.span`\n  font-size: 34px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, Green, Orange, Red, BigNumbers } from './Statistics.styled';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <div>\n    <Text>\n      Good:{' '}\n      <BigNumbers>\n        <Green>{good}</Green>\n      </BigNumbers>\n    </Text>\n    <Text>\n      Neutral:{' '}\n      <BigNumbers>\n        <Orange>{neutral}</Orange>\n      </BigNumbers>\n    </Text>\n    <Text>\n      Bad:{' '}\n      <BigNumbers>\n        <Red>{bad}</Red>\n      </BigNumbers>\n    </Text>\n    <Text>\n      Total: <BigNumbers>{total}</BigNumbers>\n    </Text>\n    <Text>\n      Positive feedback: <BigNumbers>{positivePercentage}%</BigNumbers>\n    </Text>\n  </div>\n);\n\nexport default Statistics;\n\n// Statistics.propTypes = {\n//   good: PropTypes.number,\n//   neutral: PropTypes.number,\n//   bad: PropTypes.number,\n//   total: PropTypes.number,\n//   positivePercentage: PropTypes.number,\n// };\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  padding: 24px;\n  margin-left: 15px;\n  background-color: pink;\n  font-size: 24px;\n  border-radius: 15px;\n  color: black;\n  font-weight: bold;\n  cursor: pointer;\n  &:hover {\n    color: grey;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from './FeedbackOptions.styled';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) =>\n  options.map(option => (\n    <Button type=\"button\" key={option} onClick={() => onLeaveFeedback(option)}>\n      {option}\n    </Button>\n  ));\n\nexport default FeedbackOptions;\n\n// FeedbackOptions.propTypes = {\n//   options: PropTypes.array,\n//   onLeaveFeedback: PropTypes.func,\n// };\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\npadding: 24px;\nfont-size: 34px;\ncolor: black;\nfont-weight: bold;\n\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from '../Sections/Section.styled';\n\nconst Section = ({ title, children }) => (\n  <>\n    <Title>{title}</Title>\n    <div>{children}</div>\n  </>\n);\n\nexport default Section;\n\n// Section.propTypes = {\n//     title: PropTypes.string,\n//     children: PropTypes.element,\n// }\n","import styled from '@emotion/styled';\n\nexport const Text = styled.p`\npadding: 24px;\nfont-size: 24px;\ncolor: red;\nfont-weight: bold;\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text } from './Notification.styled';\n\nconst Notification = ({ message }) => <Text>{message}</Text>;\nexport default Notification;\n\n// Notification.propTypes = {\n//     message: PropTypes.string\n// }\n","import React, { useState } from 'react';\nimport Statistics from './Statistics/Statistics';\nimport FeedbackOptions from './FeedBackOptions/FeedbackOptions';\nimport Section from './Sections/Section';\nimport Notification from './Notification/Notification';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleIncrement = feedback => {\n    switch (feedback) {\n      case 'good':\n        setGood(state => state + 1);\n        break;\n      case 'neutral':\n        setNeutral(state => state + 1);\n        break;\n      case 'bad':\n        setBad(state => state + 1);\n        break;\n      default:\n        console.log('Invalid feedback type');\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + bad + neutral;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = good + bad + neutral;\n    return Math.round((good * 100) / total);\n  };\n\n  const options = Object.keys({ good, neutral, bad });\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={options} onLeaveFeedback={handleIncrement} />\n      </Section>\n      {good || bad || neutral > 0 ? (\n        <Section title=\"Statistic\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      ) : (\n        <Notification message=\"No feedback given\"></Notification>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />,\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}